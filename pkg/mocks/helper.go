package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// This file overwrites some mocked methods

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
	subResourceClient *SubResourceClient
}

// Status provides a mock function with given fields:
func (_m *Client) Status() client.SubResourceWriter {
	return _m.SubResource("status")
	// ret := _m.Called()

	// var r0 client.SubResourceWriter
	// if rf, ok := ret.Get(0).(func() client.SubResourceWriter); ok {
	// 	r0 = rf()
	// } else {
	// 	if ret.Get(0) != nil {
	// 		r0 = ret.Get(0).(client.SubResourceWriter)
	// 	}
	// }
	// return r0
}

// SubResource provides a mock function with given fields: subResource
func (_m *Client) SubResource(subResource string) client.SubResourceClient {
	return _m.subResourceClient
	// ret := _m.Called(subResource)

	// var r0 client.SubResourceClient
	// if rf, ok := ret.Get(0).(func(string) client.SubResourceClient); ok {
	// 	r0 = rf(subResource)
	// } else {
	// 	if ret.Get(0) != nil {
	// 		r0 = ret.Get(0).(client.SubResourceClient)
	// 	}
	// }

	// return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	subclient := NewSubResourceClient(t)
	mock := &Client{subResourceClient: subclient}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
